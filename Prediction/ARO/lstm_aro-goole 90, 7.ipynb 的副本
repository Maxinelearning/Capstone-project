{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from keras._tf_keras.keras.optimizers import get\n",
    "from keras import Sequential\n",
    "from keras._tf_keras.keras.layers import LSTM, Dense, Dropout, Input\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "from typing import List"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load and Preprocess Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the data\n",
    "df = pd.read_csv('/Users/maxineh./Desktop/CA-DA/Project/Machine Learning Mini Project/Group 4/Data_Feb 01/Data extraction/alphabet_(google)_data.csv')  # Replace with your data file\n",
    "df['Date'] = pd.to_datetime(df['Date'],format=\"mixed\")\n",
    "df.set_index('Date', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Identify target variables and features\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = df[[\"Close\"]]\n",
    "features = [\"High\",\"Low\", \"Volume\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Normalising the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalize the features\n",
    "scaler = MinMaxScaler()\n",
    "feature_transform = scaler.fit_transform(df[features])\n",
    "feature_transform = pd.DataFrame(columns=features, data=feature_transform, index=df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scale target\n",
    "target_scaler = MinMaxScaler()\n",
    "target_scaled = target_scaler.fit_transform(target)\n",
    "target_scaled = pd.DataFrame(target_scaled, columns=[\"Close\"], index=target.index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating Sequence and Splitting data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Create Sequence function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_sequences(features: pd.DataFrame, target: pd.DataFrame, previous_timesteps: int, predict_timesteps: int) -> tuple[np.ndarray, np.ndarray]:\n",
    "    X, y = [], []\n",
    "    features_values = features.values\n",
    "    target_values = target.values  # Convert target DataFrame to numpy array\n",
    "\n",
    "    # Iterate through the dataset\n",
    "    for i in range(len(features_values) - previous_timesteps - predict_timesteps + 1):\n",
    "        X.append(features_values[i:i + previous_timesteps])  # Previous timesteps of data\n",
    "        y.append(target_values[i + previous_timesteps:i + previous_timesteps + predict_timesteps])  # Next 7 days of prices\n",
    "    \n",
    "    return np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Create dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (1693, 90, 3), y_train shape: (1693, 7, 1)\n",
      "X_val shape: (363, 90, 3), y_val shape: (363, 7, 1)\n",
      "X_test shape: (363, 90, 3), y_test shape: (363, 7, 1)\n"
     ]
    }
   ],
   "source": [
    "previous_timesteps = 90 # adjustable\n",
    "predict_timesteps = 7  # adjustable\n",
    "num_features = len(features)\n",
    "\n",
    "X, y = create_sequences(feature_transform, target_scaled, previous_timesteps=previous_timesteps, predict_timesteps=predict_timesteps)\n",
    "\n",
    "# Assuming X and y are your features and targets, respectively\n",
    "train_size = int(len(X) * 0.7)  # 70% for training\n",
    "X_train, X_val = X[:train_size], X[train_size:]  # First 70% for training, rest for validation\n",
    "y_train, y_val = y[:train_size], y[train_size:]  # Corresponding targets\n",
    "\n",
    "val_size = int(len(X_val) * 0.5)  # 50% of validation for testing\n",
    "X_val, X_test = X_val[:val_size], X_val[val_size:]  # Split the validation set\n",
    "y_val, y_test = y_val[:val_size], y_val[val_size:]  # Corresponding targets\n",
    "\n",
    "# Check the shapes\n",
    "print(f\"X_train shape: {X_train.shape}, y_train shape: {y_train.shape}\")\n",
    "print(f\"X_val shape: {X_val.shape}, y_val shape: {y_val.shape}\")\n",
    "print(f\"X_test shape: {X_test.shape}, y_test shape: {y_test.shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define the LSTM Model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_model(\n",
    "    input_shape: tuple[int, int],  # Tuple indicating (timesteps, features)\n",
    "    neuron_list: List[int],        # Number of neurons\n",
    "    dropout_rate: float,           # Float for dropout rate\n",
    "    optimizer: str,                # String for optimizer name\n",
    "    learning_rate: float           # Float for learning rate\n",
    ") -> Sequential:                   # Return type is a Keras Sequential model\n",
    "\n",
    "    model = Sequential()\n",
    "    \n",
    "    # Input layer \n",
    "    model.add(Input(shape=input_shape)) \n",
    "\n",
    "    # First layer\n",
    "    model.add(LSTM(units=neuron_list[0], return_sequences=True))\n",
    "\n",
    "    # Conditional Second LSTM Layer (x2)\n",
    "    if neuron_list[1] > 0:\n",
    "        model.add(LSTM(units=neuron_list[2], return_sequences=(neuron_list[3] > 0)))\n",
    "    \n",
    "    # Conditional Third LSTM Layer (x4)\n",
    "    if neuron_list[3] > 0:\n",
    "        model.add(LSTM(units=neuron_list[4], return_sequences=False))\n",
    "    \n",
    "    # Dense Layer (x5)\n",
    "    model.add(Dense(units=neuron_list[5]))\n",
    "    \n",
    "    # Dropout Layer (x6)\n",
    "    model.add(Dropout(dropout_rate))  \n",
    "    \n",
    "    # Output Layer for predicting\n",
    "    model.add(Dense(predict_timesteps))  \n",
    "    \n",
    "    # Compile the model\n",
    "    model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def objective_function(params):\n",
    "    # Extract parameters\n",
    "    neuron_list = [int(params[0]), int(params[1]), int(params[2]), int(params[3]), int(params[4]), int(params[5])]\n",
    "    dropout_rate = params[6]  # Dropout rate\n",
    "    learning_rate = params[7]  # Learning rate\n",
    "    optimizer = 'adam'  # Example optimizer\n",
    "\n",
    "    # Define input shape\n",
    "    input_shape = (previous_timesteps, num_features)  # Use actual values\n",
    "\n",
    "    # Build the model\n",
    "    model = build_model(input_shape, neuron_list=neuron_list, dropout_rate=dropout_rate, optimizer=optimizer, learning_rate=learning_rate)\n",
    "    \n",
    "    # Fit the model\n",
    "    model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=0)\n",
    "    \n",
    "    # Evaluate on validation set and return the validation loss\n",
    "    val_loss = model.evaluate(X_val, y_val, verbose=0)\n",
    "    \n",
    "    return float(val_loss)  # Ensure it returns a float"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implement Artificial Rabbits Optimization (ARO)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def artificial_rabbit_optimization(objective_function, bounds: np.ndarray, num_rabbits: int, iterations: int):\n",
    "    # Initialize rabbits (potential solutions)\n",
    "    rabbits = np.random.uniform(bounds[:, 0], bounds[:, 1], (num_rabbits, bounds.shape[0]))\n",
    "    best_solution = None\n",
    "    best_score = float('inf')\n",
    "\n",
    "    for _ in range(iterations):\n",
    "        for i in range(num_rabbits):\n",
    "            # Evaluate the score using the objective function\n",
    "            score = objective_function(rabbits[i])\n",
    "            if score < best_score:\n",
    "                best_score = score\n",
    "                best_solution = rabbits[i]\n",
    "\n",
    "        for i in range(num_rabbits):\n",
    "            # Update rabbit's position towards the best solution\n",
    "            rabbits[i] += np.random.uniform(-1, 1) * (best_solution - rabbits[i])\n",
    "            # Ensure the new position stays within bounds\n",
    "            rabbits[i] = np.clip(rabbits[i], bounds[:, 0], bounds[:, 1])\n",
    "            \n",
    "    return best_solution, best_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Run ARO to Get Optimal Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters: [1.34497116e+01 9.99910460e+00 1.74495728e+00 6.09724719e-02\n",
      " 1.99154036e+01 6.00784628e+01 6.66574847e-01 7.90751452e-03]\n",
      "Best Score: 0.0011476199142634869\n"
     ]
    }
   ],
   "source": [
    "# Define bounds for hyperparameters\n",
    "bounds = np.array([ #adjustable\n",
    "    [1, 20],   # x0 (can only adjust the upper bound)\n",
    "    [0, 20],   # x1 (can only adjust the upper bound)\n",
    "    [1, 20],   # x2 (can only adjust the upper bound)\n",
    "    [0, 20],   # x3 (can only adjust the upper bound)\n",
    "    [1, 20],   # x4 (can only adjust the upper bound)\n",
    "    [7, 90],   # x5: Dense layer units (cannot below than 7) (can only adjust the upper bound)\n",
    "    [0.3, 0.7],  # x6: Dropout rate\n",
    "    [0.000001, 0.01]  # x7: Learning rate\n",
    "])\n",
    "\n",
    "# Run ARO\n",
    "#num_rabbit and iterations is adjustable, the larger the no. the longer it takes to find the best parameter\n",
    "best_params, best_score = artificial_rabbit_optimization(objective_function, bounds, num_rabbits=20, iterations=20) \n",
    "\n",
    "# Output the best parameters and score\n",
    "print(\"Best Parameters:\", best_params)\n",
    "print(\"Best Score:\", best_score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train the Final Model with Optimal Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_final_model(params):\n",
    "    # Extract parameters\n",
    "    neuron_list = [int(params[0]), int(params[1]), int(params[2]), int(params[3]), int(params[4]), int(params[5])]\n",
    "    dropout_rate = params[6]  # Dropout rate\n",
    "    learning_rate = params[7]  # Learning rate\n",
    "    optimizer = 'adam'  # optimizer (adjustable)\n",
    "\n",
    "    # Define input shape\n",
    "    input_shape = (previous_timesteps, num_features)  # Use actual values\n",
    "\n",
    "    # Build the model\n",
    "    final_model = build_model(input_shape, neuron_list=neuron_list, dropout_rate=dropout_rate, optimizer=optimizer, learning_rate=learning_rate)\n",
    "    \n",
    "    # Fit the model\n",
    "    history = final_model.fit(X_train, \n",
    "                    y_train, \n",
    "                    epochs=50,  # adjustable \n",
    "                    batch_size=32,  # adjustable\n",
    "                    validation_data=(X_val, y_val),\n",
    "                    verbose=1)\n",
    "    \n",
    "    return final_model, history  # return the final model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 21ms/step - loss: 0.0662 - val_loss: 0.0297\n",
      "Epoch 2/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0166 - val_loss: 0.0044\n",
      "Epoch 3/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 15ms/step - loss: 0.0103 - val_loss: 0.0022\n",
      "Epoch 4/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - loss: 0.0076 - val_loss: 0.0027\n",
      "Epoch 5/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step - loss: 0.0064 - val_loss: 0.0016\n",
      "Epoch 6/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - loss: 0.0055 - val_loss: 0.0015\n",
      "Epoch 7/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 17ms/step - loss: 0.0044 - val_loss: 0.0024\n",
      "Epoch 8/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 17ms/step - loss: 0.0038 - val_loss: 0.0020\n",
      "Epoch 9/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0039 - val_loss: 0.0016\n",
      "Epoch 10/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - loss: 0.0036 - val_loss: 0.0015\n",
      "Epoch 11/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0030 - val_loss: 0.0015\n",
      "Epoch 12/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0025 - val_loss: 0.0017\n",
      "Epoch 13/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0027 - val_loss: 0.0014\n",
      "Epoch 14/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0027 - val_loss: 0.0013\n",
      "Epoch 15/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0023 - val_loss: 0.0014\n",
      "Epoch 16/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0023 - val_loss: 0.0013\n",
      "Epoch 17/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0022 - val_loss: 0.0013\n",
      "Epoch 18/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0021 - val_loss: 0.0015\n",
      "Epoch 19/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - loss: 0.0018 - val_loss: 0.0015\n",
      "Epoch 20/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0020 - val_loss: 0.0018\n",
      "Epoch 21/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0021 - val_loss: 0.0018\n",
      "Epoch 22/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0016 - val_loss: 0.0015\n",
      "Epoch 23/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0018 - val_loss: 0.0013\n",
      "Epoch 24/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0020 - val_loss: 0.0014\n",
      "Epoch 25/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0018 - val_loss: 0.0013\n",
      "Epoch 26/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0021 - val_loss: 0.0012\n",
      "Epoch 27/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0016 - val_loss: 0.0012\n",
      "Epoch 28/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0018 - val_loss: 0.0013\n",
      "Epoch 29/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - loss: 0.0017 - val_loss: 0.0012\n",
      "Epoch 30/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0018 - val_loss: 0.0012\n",
      "Epoch 31/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0016 - val_loss: 0.0013\n",
      "Epoch 32/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0015 - val_loss: 0.0012\n",
      "Epoch 33/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0016 - val_loss: 0.0014\n",
      "Epoch 34/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - loss: 0.0018 - val_loss: 0.0012\n",
      "Epoch 35/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0015 - val_loss: 0.0012\n",
      "Epoch 36/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0015 - val_loss: 0.0012\n",
      "Epoch 37/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0017 - val_loss: 0.0013\n",
      "Epoch 38/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0016 - val_loss: 0.0013\n",
      "Epoch 39/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - loss: 0.0013 - val_loss: 0.0014\n",
      "Epoch 40/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0015 - val_loss: 0.0015\n",
      "Epoch 41/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0014 - val_loss: 0.0012\n",
      "Epoch 42/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0013 - val_loss: 0.0012\n",
      "Epoch 43/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0017 - val_loss: 0.0012\n",
      "Epoch 44/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0012 - val_loss: 0.0018\n",
      "Epoch 45/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - loss: 0.0015 - val_loss: 0.0012\n",
      "Epoch 46/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0013 - val_loss: 0.0012\n",
      "Epoch 47/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0013 - val_loss: 0.0012\n",
      "Epoch 48/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0013 - val_loss: 0.0011\n",
      "Epoch 49/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0012 - val_loss: 0.0014\n",
      "Epoch 50/50\n",
      "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 13ms/step - loss: 0.0013 - val_loss: 0.0013\n"
     ]
    }
   ],
   "source": [
    "# You can save the best_params so you do not need to run the aro everytime\n",
    "# best_params = [1.43406601e+01, 1.92261080e+01, 2.64559278e+00, 5.24420276e-01, 1.18601677e+01, 1.36447102e+01, 3.06597309e-01, 9.20223522e-03]\n",
    "# best_score = 0.0027781911194324493\n",
    "\n",
    "final_model, history = create_final_model(best_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluate on validation set and return the validation loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_loss = final_model.evaluate(X_test, y_test, verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the loss\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Google Model Loss Over Epochs')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make Prediction "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step\n"
     ]
    }
   ],
   "source": [
    "y_pred = final_model.predict(X_test)\n",
    "prediction = target_scaler.inverse_transform(y_pred)\n",
    "y_test_evaluate = target_scaler.inverse_transform(y_test.reshape(y_test.shape[0], y_test.shape[1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate Error Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 14.017427849336652\n",
      "MAPE: 99.55550104471737\n",
      "MAE: 11.945855812987007\n",
      "R²: 0.46110545999741903\n"
     ]
    }
   ],
   "source": [
    "# Calculate metrics\n",
    "\n",
    "rmse = np.sqrt(mean_squared_error(y_test_evaluate, prediction))\n",
    "mae = mean_absolute_error(y_test_evaluate, prediction)\n",
    "mape = np.mean(np.abs((y_test_evaluate - y_pred)/y_test_evaluate))*100\n",
    "r2 = r2_score(y_test_evaluate, prediction)\n",
    "\n",
    "print(f'RMSE: {rmse}')\n",
    "print(f'MAPE: {mape}')\n",
    "print(f'MAE: {mae}')\n",
    "print(f'R²: {r2}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualisation\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Scale back Actual Price for plotting\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select the first column to get the true value for each date\n",
    "y_test_true = y_test[:, 0].reshape(-1, 1)  # Reshape to (368, 1)\n",
    "y_test_original = target_scaler.inverse_transform(y_test_true)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Create date for new df to contain actual value and predicted value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2023-01-08', '2023-01-09', '2023-01-11', '2023-01-12',\n",
       "               '2023-02-08', '2023-02-10', '2023-02-11', '2023-03-08',\n",
       "               '2023-03-10', '2023-03-11',\n",
       "               ...\n",
       "               '2024-12-16', '2024-12-17', '2024-12-18', '2024-12-19',\n",
       "               '2024-12-20', '2024-12-23', '2024-12-24', '2024-12-26',\n",
       "               '2024-12-27', '2024-12-30'],\n",
       "              dtype='datetime64[ns]', name='Date', length=363, freq=None)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate the index dates for the DataFrame\n",
    "index_dates = df.index[-len(y_test_original):].sort_values()\n",
    "\n",
    "# Generate the column dates for the DataFrame\n",
    "column_dates = df.index[-len(y_test_original) :].sort_values()\n",
    "\n",
    "# add back the date that you need to contain all the prediction value on the last prediction\n",
    "future_dates = [\"2024-12-31\", \"2025-01-02\", \"2025-01-03\", \"2025-01-06\", \"2025-01-07\", \"2025-01-08\", \"2025-01-10\", \n",
    "                \"2025-01-13\", \"2025-01-14\", \"2025-01-15\", \"2025-01-16\", \"2025-01-17\", \"2025-01-21\"]  \n",
    "\n",
    "# Convert future_dates to DatetimeIndex\n",
    "future_dates_index = pd.DatetimeIndex(future_dates)\n",
    "\n",
    "# Append future dates to the existing column_dates\n",
    "updated_dates = column_dates.append(future_dates_index)\n",
    "column_dates\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            2023-01-08  2023-01-09  2023-01-11  2023-01-12  2023-02-08  \\\n",
      "Date                                                                     \n",
      "2023-01-08  115.532837  115.535851  116.045456  116.278778  116.109932   \n",
      "2023-01-09         NaN   116.02179   116.02449  116.536583  116.771927   \n",
      "2023-01-11         NaN         NaN   116.67746  116.679733   117.19516   \n",
      "2023-01-12         NaN         NaN         NaN  117.231026  117.232971   \n",
      "2023-02-08         NaN         NaN         NaN         NaN  117.645508   \n",
      "...                ...         ...         ...         ...         ...   \n",
      "2024-12-23         NaN         NaN         NaN         NaN         NaN   \n",
      "2024-12-24         NaN         NaN         NaN         NaN         NaN   \n",
      "2024-12-26         NaN         NaN         NaN         NaN         NaN   \n",
      "2024-12-27         NaN         NaN         NaN         NaN         NaN   \n",
      "2024-12-30         NaN         NaN         NaN         NaN         NaN   \n",
      "\n",
      "            2023-02-10  2023-02-11  2023-03-08  2023-03-10  2023-03-11  ...  \\\n",
      "Date                                                                    ...   \n",
      "2023-01-08  116.235069  116.433907         NaN         NaN         NaN  ...   \n",
      "2023-01-09  116.602386  116.727028  116.926613         NaN         NaN  ...   \n",
      "2023-01-11  117.433228  117.262711  117.386711  117.587303         NaN  ...   \n",
      "2023-01-12  117.751198  117.991562  117.820229  117.943665  118.145096  ...   \n",
      "2023-02-08  117.647179  118.167511  118.409592  118.237656  118.360687  ...   \n",
      "...                ...         ...         ...         ...         ...  ...   \n",
      "2024-12-23         NaN         NaN         NaN         NaN         NaN  ...   \n",
      "2024-12-24         NaN         NaN         NaN         NaN         NaN  ...   \n",
      "2024-12-26         NaN         NaN         NaN         NaN         NaN  ...   \n",
      "2024-12-27         NaN         NaN         NaN         NaN         NaN  ...   \n",
      "2024-12-30         NaN         NaN         NaN         NaN         NaN  ...   \n",
      "\n",
      "            2025-01-06  2025-01-07  2025-01-08 2025-01-10 2025-01-13  \\\n",
      "Date                                                                   \n",
      "2023-01-08         NaN         NaN         NaN        NaN        NaN   \n",
      "2023-01-09         NaN         NaN         NaN        NaN        NaN   \n",
      "2023-01-11         NaN         NaN         NaN        NaN        NaN   \n",
      "2023-01-12         NaN         NaN         NaN        NaN        NaN   \n",
      "2023-02-08         NaN         NaN         NaN        NaN        NaN   \n",
      "...                ...         ...         ...        ...        ...   \n",
      "2024-12-23         NaN         NaN         NaN        NaN        NaN   \n",
      "2024-12-24         NaN         NaN         NaN        NaN        NaN   \n",
      "2024-12-26  163.556137         NaN         NaN        NaN        NaN   \n",
      "2024-12-27  164.758209   165.03096         NaN        NaN        NaN   \n",
      "2024-12-30   165.62117  165.697128  165.971329        NaN        NaN   \n",
      "\n",
      "           2025-01-14 2025-01-15 2025-01-16 2025-01-17 2025-01-21  \n",
      "Date                                                               \n",
      "2023-01-08        NaN        NaN        NaN        NaN        NaN  \n",
      "2023-01-09        NaN        NaN        NaN        NaN        NaN  \n",
      "2023-01-11        NaN        NaN        NaN        NaN        NaN  \n",
      "2023-01-12        NaN        NaN        NaN        NaN        NaN  \n",
      "2023-02-08        NaN        NaN        NaN        NaN        NaN  \n",
      "...               ...        ...        ...        ...        ...  \n",
      "2024-12-23        NaN        NaN        NaN        NaN        NaN  \n",
      "2024-12-24        NaN        NaN        NaN        NaN        NaN  \n",
      "2024-12-26        NaN        NaN        NaN        NaN        NaN  \n",
      "2024-12-27        NaN        NaN        NaN        NaN        NaN  \n",
      "2024-12-30        NaN        NaN        NaN        NaN        NaN  \n",
      "\n",
      "[363 rows x 376 columns]\n"
     ]
    }
   ],
   "source": [
    "# Create an empty DataFrame with the desired shape\n",
    "predictions_df = pd.DataFrame(index=index_dates, columns=updated_dates)\n",
    "\n",
    "count = 0\n",
    "\n",
    "# Fill in the DataFrame with predictions\n",
    "for i in range(prediction.shape[0]):\n",
    "    for j in range(prediction.shape[1]):\n",
    "    # The correct column date corresponds to the j-th day after the first date\n",
    "        date_count = j + count\n",
    "        date = updated_dates[date_count]\n",
    "        \n",
    "        # Assign the prediction value to the corresponding date\n",
    "        # Here, we need to ensure we are filling the correct row for the date\n",
    "        predictions_df.at[predictions_df.index[i], date] = prediction[i, j]\n",
    "    count +=1\n",
    "\n",
    "# Display the resulting DataFrame\n",
    "print(predictions_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Average Prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-01-08</th>\n",
       "      <td>115.532837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-09</th>\n",
       "      <td>115.778824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-11</th>\n",
       "      <td>116.249135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-12</th>\n",
       "      <td>116.681534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-08</th>\n",
       "      <td>116.991101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-01-14</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-01-15</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-01-16</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-01-17</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-01-21</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>376 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Average Prediction\n",
       "Date                         \n",
       "2023-01-08         115.532837\n",
       "2023-01-09         115.778824\n",
       "2023-01-11         116.249135\n",
       "2023-01-12         116.681534\n",
       "2023-02-08         116.991101\n",
       "...                       ...\n",
       "2025-01-14                NaN\n",
       "2025-01-15                NaN\n",
       "2025-01-16                NaN\n",
       "2025-01-17                NaN\n",
       "2025-01-21                NaN\n",
       "\n",
       "[376 rows x 1 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the average predictions for each date\n",
    "mean_pred = predictions_df.mean(axis=0)  # axis=0 computes the mean for each column\n",
    "\n",
    "# Create a new DataFrame for the averages\n",
    "mean_pred_df = pd.DataFrame(mean_pred, columns=['Average Prediction'])\n",
    "mean_pred_df.index.name = 'Date'\n",
    "\n",
    "# Display the result\n",
    "mean_pred_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Actual Price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-01-08</th>\n",
       "      <td>124.966988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-09</th>\n",
       "      <td>124.199768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-11</th>\n",
       "      <td>123.312981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-12</th>\n",
       "      <td>121.589226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-08</th>\n",
       "      <td>118.769455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-12-23</th>\n",
       "      <td>189.820007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-12-24</th>\n",
       "      <td>196.660004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-12-26</th>\n",
       "      <td>195.419998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-12-27</th>\n",
       "      <td>188.399994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-12-30</th>\n",
       "      <td>188.509995</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>363 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Actual Price\n",
       "Date                    \n",
       "2023-01-08    124.966988\n",
       "2023-01-09    124.199768\n",
       "2023-01-11    123.312981\n",
       "2023-01-12    121.589226\n",
       "2023-02-08    118.769455\n",
       "...                  ...\n",
       "2024-12-23    189.820007\n",
       "2024-12-24    196.660004\n",
       "2024-12-26    195.419998\n",
       "2024-12-27    188.399994\n",
       "2024-12-30    188.509995\n",
       "\n",
       "[363 rows x 1 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "actual_price_df = pd.DataFrame(index=index_dates, columns=[\"Actual Price\"], data=y_test_original)\n",
    "actual_price_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_df = pd.merge(actual_price_df, mean_pred_df, how='right',right_on=[\"Date\"], left_on=[\"Date\"])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Plot the graph (Actual price vs Predict price)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20, 6))\n",
    "\n",
    "# Plot True Values\n",
    "plt.plot(merged_df.index, merged_df['Actual Price'], label='Actual Price', color='blue', linestyle='-', linewidth=1)\n",
    "\n",
    "# Plot Average Predictions\n",
    "plt.plot(merged_df.index, merged_df['Average Prediction'], label='Predicted Price', color='orange', linestyle='-', linewidth=1)\n",
    "\n",
    "# Customize the plot\n",
    "plt.title('Google Actual Close Price vs Predicted Close Price')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price')\n",
    "plt.xticks(rotation=45)\n",
    "plt.legend()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_df.to_csv(\"actual_vs_prediction_tesla.csv\", index=True, header=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "PythonEveryone",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
